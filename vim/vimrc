set nocompatible              " be iMproved, required
filetype off                  " required

" Remap leader key
let mapleader = ' '

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " The following are examples of different formats supported.
  " Keep Plugin commands between vundle#begin/end.
  " plugin on GitHub repo
  Plugin 'tpope/vim-fugitive'
  " plugin from http://vim-scripts.org/vim/scripts.html
  " Plugin 'L9'
  " Git plugin not hosted on GitHub
  Plugin 'git://git.wincent.com/command-t.git'
  " git repos on your local machine (i.e. when working on your own plugin)
  " Plugin 'file:///home/gmarik/path/to/plugin'
  " The sparkup vim script is in a subdirectory of this repo called vim.
  " Pass the path to set the runtimepath properly.
  Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
  " Install L9 and avoid a Naming conflict if you've already installed a
  " different version somewhere else.
  " Plugin 'ascenator/L9', {'name': 'newL9'}

  " All of your Plugins must be added before the following line

  " Show trailing whitespace and spaces before a tab:
  Plugin 'ntpeters/vim-better-whitespace'

  " Smooth scroll
  Plugin 'yuttie/comfortable-motion.vim'

  " Enable syntax color
  Plugin 'sheerun/vim-polyglot'

  " Elixir
  Plugin 'elixir-editors/vim-elixir'

  " Comments
  Plugin 'scrooloose/nerdcommenter'

  " NERDtree plugins
  Plugin 'scrooloose/nerdtree'
  Plugin 'Xuyuanp/nerdtree-git-plugin'

  " Linting
  Plugin 'w0rp/ale'
  "Plugin 'airblade/vim-gitgutter'

  " status tab
  Plugin 'vim-airline/vim-airline'
  Plugin 'vim-airline/vim-airline-themes'

  " Markdown
  Plugin 'godlygeek/tabular'
  Plugin 'plasticboy/vim-markdown'
  Plugin 'junegunn/vim-easy-align'
  Plugin 'JamshedVesuna/vim-markdown-preview'
  " auto toc
  Plugin 'mzlogin/vim-markdown-toc'

  Plugin 'terryma/vim-multiple-cursors'

  Plugin 'brooth/far.vim'

  " Remove highlight when move the cursor after a search
  Plugin 'romainl/vim-cool'
  " fzf
  Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plugin 'junegunn/fzf.vim'

  "
  " Colors schemes
  "
  "Plugin 'KeitaNakamura/neodark.vim'
  Plugin 'dracula/vim'
  "Plugin 'joshdick/onedark.vim'
  "Plugin 'rakr/vim-one'

  " Dash integration
  Plugin 'rizzatti/dash.vim'

  " Startup buffer
  Plugin 'mhinz/vim-startify'
call vundle#end()            " required

filetype plugin indent on    " required


let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

" Set swp directories
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//
set undodir=~/.vim/undo//

" Set line numbers
set ruler
set number

" Tab to spaces
set expandtab
set tabstop=2

" Fix backspace
set backspace=indent,eol,start

" Removes trailing spaces
function TrimWhiteSpaces()
  %s/\s*$//
  ''
endfunction

set list listchars=trail:.,extends:>
autocmd FileWritePre * call TrimWhiteSpaces()
autocmd FileAppendPre * call TrimWhiteSpaces()
autocmd FilterWritePre * call TrimWhiteSpaces()
autocmd BufWritePre * call TrimWhiteSpaces()

" Custom plugins

" nerdtree
map <C-o> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 0
map <leader>/ <plug>NERDCommenterToggle
nmap <leader>rf :NERDTreeFind<CR>
nmap <leader>o :NERDTreeFocus<CR>
" Auto open NERDTree
"autocmd vimenter * if !argc() | NERDTree | endif
"Auto close NERDTree if the latest buffer is the file tree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" NERDTree file icons and color syntax
"Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

" Icons
"Plugin 'ryanoasis/vim-devicons'
" To fix wrong padding
"let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
"let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
"set encoding=UTF-8

"
" Ale
"

let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 1
let g:ale_c_parse_makefile = 1
let g:ale_fix_on_save = 1
let g:ale_elixir_elixir_ls_release = $HOME.'/.vim/elixir-ls/rel'
let g:ale_linters = {
\ 'elixir': ['elixir-ls'],
\}
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'elixir': ['mix_format'],
\ }

imap <C-Space> <Plug>(ale_complete)
noremap <Leader>gd :ALEGoToDefinition<CR>
noremap <Leader>gdt :ALEGoToDefinitionInTab<CR>

"
" Color schemes
"

set background=dark

"colorscheme onedark
"colorscheme one
"colorscheme neodark
"colorscheme idlefingers

" https://github.com/dracula/vim/issues/81
let g:dracula_italic = 0
colorscheme dracula

highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

" Column width indicator
set colorcolumn=99
autocmd ColorScheme * highlight ColorColumn ctermbg=red

" Line number indicator
autocmd ColorScheme * highlight LineNr ctermfg=lightgrey

if (has("termguicolors"))
 set termguicolors
endif

" Markdown
let g:vim_markdown_folding_disabled = 1
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
let vim_markdown_preview_github=1

" Spell checking
set spell spelllang=en_us,es_es

" Open HTML in browser
nnoremap <C-p> :!open -a Safari %<CR><CR>

" Indentation
set shiftwidth=2
set autoindent
set smartindent

set autochdir

" Search and replace word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
nnoremap <Leader>BS :1,.s/\<<C-r><C-w>\>/
nnoremap <Leader>S :.,$s/\<<C-r><C-w>\>/

" Enable highlight when searching
set hlsearch

" Empty lines without insert mode
nnoremap o o<Esc>
nnoremap O O<Esc>

function! WrapSelect (front)
    "puts characters around the selected text.
    let l:front = a:front
    if (a:front == '[')
        let l:back = ']'
    elseif (a:front == '(')
        let l:back = ')'
    elseif (a:front == '{')
        let l:back = '}'
    elseif (a:front == '<')
        let l:back = '>'
    elseif (a:front =~ " ")
        let l:split = split(a:front)
        let l:back = l:split[1]
        let l:front = l:split[0]
    else
        let l:back = a:front
    endif
    "execute: concat all these strings. '.' means "concat without spaces"
    "norm means "run in normal mode and also be able to use \<C-x> characters"
    "gv means "get the previous visual selection back up"
    "c means "cut visual selection and go to insert mode"
    "\<C-R> means "insert the contents of a register. in this case, the
    "default register"
    execute 'norm! gvc' . l:front. "\<C-R>\""  . l:back
endfunction
vnoremap <C-l> :<C-u>call WrapSelect(input('Wrapping? Give both (space separated) or just the first one: '))<cr>

"
" GIT edit
"
" Split buffer in git edit
if has('nvim')
  let $GIT_EDITOR = 'nvr -cc split --remote-wait'
endif

if has("autocmd")
  " Delete git buffer when hidden
  autocmd FileType gitcommit set bufhidden=delete
  autocmd FileType markdown setlocal spell wrap textwidth=80
end

"
" fzf
"
nnoremap <silent> <leader>. :Ag<CR>
nnoremap <silent> <leader>; :Rg<CR>

"
" Resizes
"
nnoremap <silent> <Leader>9 :exe "vertical resize " . (winwidth(0) * 10/9)<CR>
noremap <silent> <Leader>0 :exe "vertical resize " . (winwidth(0) * 9/10)<CR>

noremap <leader>v3 :vertical resize 30<CR>
noremap <leader>v4 :vertical resize 40<CR>
noremap <leader>v5 :vertical resize 50<CR>
noremap <leader>v6 :vertical resize 60<CR>
noremap <leader>v7 :vertical resize 70<CR>
noremap <leader>v8 :vertical resize 80<CR>
noremap <leader>v= <C-w>=


"
" Delete, yanking...
"
" Delete text without yank
noremap <leader>D "_D
vnoremap <leader>D "_D
noremap <leader>dd "_dd
vnoremap <leader>dd "_dd
noremap <leader>y "*y
vnoremap <leader>y "*y
noremap <leader>yy "*yy
vnoremap <leader>yy "*yy
noremap <leader>Y "*Y
vnoremap <leader>Y "*Y
noremap <leader>p "*p
vnoremap <leader>p "*p
noremap <leader>P "*P
vnoremap <leader>P "*P
" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap x "_x
vnoremap x "_x

" replace currently selected text with default register
" without yanking it
vnoremap p "_dP

"
" Open cursor in Dash
"
noremap <leader>da :Dash<CR>

"
" Window management
"
"autocmd BufEnter * silent! lcd %:p:h
augroup terminal
  autocmd TermOpen * setlocal nospell
  autocmd TermOpen * setlocal nonumber
  autocmd TermOpen * setlocal wrap
  autocmd TermOpen * startinsert
augroup END

"autocmd FileType,BufLeave gitcommit :autocmd! TermOpen * startinsert
autocmd FileType,BufLeave gitcommit :startinsert!

" enter and leave terminal mode (insert mode) when switching between buffers
"autocmd BufWinEnter,WinEnter term://* startinsert
"autocmd BufLeave term://* stopinsert

" Skip sending escape characters for arrow keys in terminal mode
tnoremap <C-S-Up> <Nop>
tnoremap <C-S-Down> <Nop>
tnoremap <C-S-Left> <Nop>
tnoremap <C-S-Right> <Nop>
tnoremap <M-S-Up> <Nop>
tnoremap <M-S-Down> <Nop>
tnoremap <M-S-Left> <Nop>
tnoremap <M-S-Right> <Nop>
tnoremap <S-Up> <Nop>
tnoremap <S-Down> <Nop>
tnoremap <silent> <S-Left> <Esc>b
tnoremap <silent> <S-Right> <Esc>f

set splitbelow
set splitright

"noremap <leader>c  :let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>cd $VIM_DIR<CR>
"noremap ct :tabnew<CR>:let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>cd $VIM_DIR<CR>
"noremap cb :new<CR>:let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>:startinsert<CR>cd $VIM_DIR<CR>
"noremap cbv :vnew<CR>:let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>:startinsert<CR>cd $VIM_DIR<CR>
noremap <leader>c :terminal<CR>
noremap ct :tabnew<CR>:terminal<CR>
noremap cb :new<CR>:terminal<CR>
noremap cbv :vnew<CR>:terminal<CR>
tnoremap <Esc> <C-\><C-n>
" Tabs
noremap <silent> nt :tabnew<CR>
"map <silent> <C-w> :q<CR>
noremap <M-S-Left> gT
noremap <M-S-Right> gt
"move
noremap <silent> <C-M-Left> :tabm -1<CR>
noremap <silent> <C-M-Right> :tabm +1<CR>
" Buffers
map <silent> nb :new<CR>
map <silent> nbv :vnew<CR>
" Remap arrow keys to change between buffers
noremap <C-S-Up> <C-w>k
noremap <C-S-Down> <C-w>j
noremap <C-S-Left> <C-w>h
noremap <C-S-Right> <C-w>l
" Smooth scroll
nnoremap <silent> <M-Down> :call comfortable_motion#flick(100)<CR>
nnoremap <silent> <M-Up> :call comfortable_motion#flick(-100)<CR>
nnoremap <silent> <M-S-Down> :call comfortable_motion#flick(200)<CR>
nnoremap <silent> <M-S-Up> :call comfortable_motion#flick(-200)<CR>
" Change between buffers
"nnoremap <Tab> :bprevious<CR>
"nnoremap <S-Tab> :bnext<CR>
" Make splitted buffers open in right side
set splitright

" Startify
let g:startify_commands = [
  \ {'c': ['Terminal', ':terminal']},
  \ {'t': ['New tab', ':tabnew']},
\ ]

let g:startify_lists = [
  \ { 'type': 'commands',  'header': ['   Commands']       },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'files',     'header': ['   MRU']            },
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
\ ]

syntax on
